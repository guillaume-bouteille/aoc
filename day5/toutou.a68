COMMENT
To launch, run
sed 's/move//' input_2.txt | sed 's/from//' | sed 's/to//' > input_2_fixed.txt
a68g toutou.a68

COMMENT

MODE CRATE = [1:100] CHAR;
MODE CRATES = REF FLEX [] CRATE;
MODE CRATES_LEN = REF FLEX [] INT;

MODE INSTRUCTION = [1:3] INT;
MODE INSTRUCTION_LIST = REF FLEX [] INSTRUCTION;

MODE ALL_SIZES = STRUCT (INT nb_max_crates, INT nb_crate_lines, INT nb_instructions);

#
PROC pretty print line = (ITEM pline) VOID:
    print((whole(pline[1], 0),"|",whole(pline[2],0),"|",whole(pline[3],0),"|",whole(pline[4],0),new line));

PROC pretty print inputs = (INPUT_TYPE inputs) VOID:
BEGIN
    INT count := 1;
    WHILE count < UPB inputs
    DO
        pretty print line(inputs[count]);
        count := count + 1
    OD
END;
#

PROC get all sizes = ( STRING file name ) ALL_SIZES:
BEGIN
    ALL_SIZES sizes := (0,0,0);
    FILE file;
    open( file, file name, stand in channel );
    BOOL continue := TRUE;
    BOOL instruction_started := FALSE;
    
    INT count := 0;
    INT nb_instructions := 0;
    STRING line;
    WHILE continue
    DO
        IF instruction_started = FALSE THEN
            getf(file, ($gl$,line));

            IF line[2] = "1" THEN
                instruction_started := TRUE
            ELSE
                count := count + 1
            FI
        ELSE
            get(file, new line);
            IF end of file(file) = TRUE THEN
                continue := FALSE
            ELSE
                nb_instructions := nb_instructions + 1
            FI
        FI
    OD;
    close( file );
    sizes := (count, UPB line % 4, nb_instructions)
END;

PROC parse inputs = ( STRING file name, CRATES crates, CRATES_LEN crates_len, INSTRUCTION_LIST instr ) VOID:
BEGIN

    IF FILE file;
        open( file, file name, stand in channel ) = 0
    THEN
        ALL_SIZES all_sizes := get all sizes( file name );

        crates := LOC FLEX[1 : nb_crate_lines OF all_sizes] CRATE;
        crates_len := LOC FLEX[1 : nb_crate_lines OF all_sizes] INT;
        instr := LOC FLEX[1 : nb_instructions OF all_sizes] INSTRUCTION;
        
        # Set all crates to space char #
        FOR i FROM 1 TO 100
        DO
            FOR j FROM 1 TO nb_crate_lines OF all_sizes
            DO                
                crates[j][i] := " "
            OD
        OD;
        
        # Parse crates. Insert values in revers order #
        STRING line;
        FOR i FROM 1 TO nb_max_crates OF all_sizes
        DO
            getf(file, ($gl$,line));
            FOR j FROM 1 TO nb_crate_lines OF all_sizes
            DO
                IF UPB line > 4*j-2 THEN
                    crates[j][nb_max_crates OF all_sizes-i+1] := line[4*j-2]
                ELSE
                    crates[j][nb_max_crates OF all_sizes-i+1] := " "
                FI
            OD
        OD;
        
        # Ignore next 2 lines #
        get(file, new line);
        get(file, new line);
        
        # Parse instructions #
        FOR i FROM 1 TO nb_instructions OF all_sizes
        DO
            INSTRUCTION it := (0,0,0);

            get(file, it[1]);
            get(file, it[2]);
            get(file, it[3]);
            instr[i] := it
        OD;

        close( file )
    ELSE
        print(("Cannot open file", file name, new line) )
    FI
END;

#
PROC exo one = ( INPUT_TYPE inputs ) INT:
BEGIN
    INT count := 0;
    FOR i FROM 1 TO UPB inputs
    DO
        IF ((inputs[i][1] >= inputs[i][3]) AND (inputs[i][2] <= inputs[i][4])) OR ((inputs[i][1] <= inputs[i][3]) AND (inputs[i][2] >= inputs[i][4])) THEN
            count := count + 1
        FI
    OD;
    count
END;
    
PROC exo two = ( INPUT_TYPE inputs ) INT:
BEGIN
    INT count := 0;
    FOR i FROM 1 TO UPB inputs
    DO
        IF ((inputs[i][1] >= inputs[i][3]) AND (inputs[i][1] <= inputs[i][4])) OR ((inputs[i][1] <= inputs[i][3]) AND (inputs[i][3] <= inputs[i][2])) THEN
            count := count + 1
        FI
    OD;
    count
END;
#

CRATES crates := LOC FLEX [1 : 0] CRATE;
CRATES_LEN crates_len := LOC FLEX [1 : 0] INT;
INSTRUCTION_LIST instr := LOC FLEX [1 : 0] INSTRUCTION;

parse inputs( "input_2_fixed.txt", crates, crates_len, instr )

#pretty print inputs(inputs);#
#
INT answ1 := exo one(inputs);
print(("The first answer is ", whole(answ1,0), new line));

INT answ2 := exo two(inputs);
print(("The second answer is ", whole(answ2,0), new line))
#